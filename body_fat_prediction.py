# -*- coding: utf-8 -*-
"""BODY FAT PREDICTION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dzC1F-lMxvYbjlCUvS0aegeSMb3hmytg

BODY FAT PREDICTION      

**Name:** Sanika Shrivastava

**Roll No:** 114

**PRN:** 202101070070
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("/content/bodyfat.csv")
df.head()

df.info()

df.shape

df.describe()

"""**FEATURE ENGINEERING + RANDOM FOREST**"""

# feature eginerring (Creating new features)
df['Weight_kg'] = (df['Weight'] / 2.205)
df['Height_in'] = (df['Height'] / 39.37)

df.head()

df['BMI'] = (df['Weight_kg'] / (df['Height_in'] ** 2))

df.head()

'''
Underweight = <18.5
Normal weight = 18.5–24.9
Overweight = 25–29.9
Obesity = BMI of 30 or greater
'''

def trf(x):
    if x < 18.5:
        return 'Underweight'
    elif (x >= 18.5 and x <= 24.9):
        return 'Normal Weight'
    elif x >= 25 and x <= 29.9:
        return 'Overweight'
    else:
        return 'Obese'

df['BMI_Cat'] = df['BMI'].map(trf)

df.head()

df['BMI_Cat'].value_counts().plot(kind='pie',autopct='%1.1f%%',ylabel='')

df['Fat_Mass'] = (df['BodyFat'] / 100) * df['Weight_kg']

df.head()

df['Lean_Mass'] = df['Weight_kg'] - df['Fat_Mass']

df.head()

# checking for distrituions
num_col = df.select_dtypes(exclude='object')

num_col

import scipy.stats as stats

for col in num_col:
    plt.figure(figsize=(12,6))
    plt.subplot(1,2,1)
    stats.probplot(df[col],dist='norm',plot=plt)
    plt.title(f'QQ plot for {col}')
    plt.subplot(1,2,2)
    sns.kdeplot(df[col],fill=True)
    plt.title(f' Kde Plot for {col}')
    plt.tight_layout()
    plt.show()

df['BMI_Cat'].unique()
# underweight - 0
# normal -1
# over - 2
# obese - 3

from sklearn.preprocessing import OrdinalEncoder
categories = [['Underweight','Normal Weight','Overweight','Obese']]
enc = OrdinalEncoder(categories=categories)

df['BMI_Encoded'] = enc.fit_transform(df[['BMI_Cat']])

df[df['BMI_Cat'] == 'Obese']

df.drop(columns='BMI_Cat',inplace=True)

df.head()

X = df.drop(columns='BodyFat')
Y = df['BodyFat']

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.2,random_state=23)

rf = RandomForestRegressor(n_estimators=500)

x_train

rf.fit(x_train,y_train)

y_pred = rf.predict(x_test)

from sklearn.metrics import mean_absolute_error,mean_squared_error
mse = mean_absolute_error(y_test,y_pred)
mse_sqrd = mean_squared_error(y_test,y_pred)

mse

RMSE = np.sqrt(mse)

RMSE

"""**CHECKING FOR DUPLICATES**"""

df.duplicated().sum()

col=list(df.columns)

"""**Checking for any discrepancy in the dataset values**"""

for i in col:
    print(i)
    print(df[f"{i}"].unique())

"""**Checking for correlation in data**"""

from itertools import combinations
column_pairs = list(combinations(df.columns, 2))

# Create and store a list of DataFrames for each pair
dataframes = []
for col1, col2 in column_pairs:
    new_df = df[[col1, col2]].copy()
    dataframes.append(new_df)

# Display the resulting DataFrames
for idx, d in enumerate(dataframes):
    sns.pairplot(data=dataframes[idx])
    plt.show()
    #print(f"DataFrame {idx + 1} ({column_pairs[idx][0]} & {column_pairs[idx][1]}):\n{d}\n")

plt.figure(figsize=(10,10))
sns.boxplot(df)
plt.show()

Q1=df.quantile(0.25)
Q3=df.quantile(0.75)
IQR=Q3-Q1
ul=Q3+1.5*IQR
ll=Q1-1.5*IQR
df=df[~((df<ll)|(df>ul)).any(axis=1)]

plt.figure(figsize=(10,10))
sns.boxplot(df)
plt.show()

"""**MEAN SQUARED ERROR**"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Suppose 'BodyFat' is the target and the rest are features, adjust as necessary
features = df.drop('BodyFat', axis=1)  # or select columns manually
target = df['BodyFat']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions using the test set
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("R-squared:", r2)











"""**SPLITTING THE DATASET**

**DECISION TREE**
"""

X=df.drop('BodyFat',axis=1).values
y=df.loc[:,["BodyFat"]].values

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=1)

X_train.shape,X_test.shape,y_train.shape,y_test.shape

from sklearn.tree import DecisionTreeRegressor
model = DecisionTreeRegressor()
model.fit(X_train, y_train)

model.score(X_test,y_test)